@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using FF1Lib;

<button type="button" class="@(IsOpen ? "nes-btn nes-nav is-success" : "nes-btn nes-nav is-warning")" @onclick="@(() => IsOpen = !IsOpen)">Presets</button>
<BSCollapse IsOpen="@IsOpen">
	<div class="is-dark nes-container">
		<div class="row">
			<div class="col-md-12">
				<p>
					Standard:
					<button type="button" class="nes-btn is-primary is-tiny" @onclick="@(() => LoadStandardPreset("default"))">Default</button>
					<button type="button" class="nes-btn is-primary is-tiny" @onclick="@(() => LoadStandardPreset("entranceshuffle"))">Floor Shuffle</button>
					<button type="button" class="nes-btn is-primary is-tiny" @onclick="@(() => LoadStandardPreset("shardhunt"))">Shard Hunt</button>
					<button type="button" class="nes-btn is-primary is-tiny" @onclick="@(() => LoadStandardPreset("chaos-rush"))">Chaos Rush</button>
					<button type="button" class="nes-btn is-primary is-tiny" @onclick="@(() => LoadStandardPreset("freeenterprise"))">Free Enterprise</button>
					<button type="button" class="nes-btn is-primary is-tiny" @onclick="@(() => LoadStandardPreset("improved-vanilla"))">Improved Vanilla</button>
				</p>
			</div>
		</div>
		<div class="row">
			<div class="col-md-12">
				<p>
					Saved: @foreach (var preset in localPresets)
					{
	<span style="white-space:nowrap">
		<button type="button" class="nes-btn is-primary is-tiny" @onclick="@(() => LoadLocalPreset(@preset))">@preset</button>
		<button type="button" class="nes-btn is-error is-tiny preset-pill" @onclick="@(() => DeleteLocalPreset(@preset))">X</button>
	</span>				}
				</p>
			</div>
		</div>
		<div class="row">&nbsp;</div>
		<div class="row">
			<div class="col-md-12">
				<p>
					Current:
					<input type="text" id="presetNameInput" @bind="presetName" />
					<button type="button" class="nes-btn is-primary" @onclick="@(() => SavePreset(false))">Save Preset</button>
					<button type="button" class="nes-btn is-primary" @onclick="@(() => SavePreset(true))">Export to JSON</button>
				</p>
			</div>
		</div>
		<div class="row">
			<div class="col-md-12">
				<p>
					Load from JSON:
					<input type="file" id="presetInput" @onchange="OnPresetChanged" />
				</p>
			</div>
		</div>
	</div>
</BSCollapse>

	@code { [Parameter] public FF1Lib.FlagsViewModel Flags { get; set; }
				[Parameter] public Action<string> SetStatusMessage { get; set; }
				[Parameter] public bool IsOpen { get; set; } = true;

				private string presetName = "Untitled";
				private string[] localPresets = { };

				protected override async void OnInitialized()
				{
					var uri = new Uri(NavigationManager.Uri);
					if (!QueryHelpers.ParseQuery(uri.Query).TryGetValue("f", out var flags))
					{
						await LoadStandardPreset("default");
					}

					await UpdatePresets();
				}

				async Task UpdatePresets()
				{
					localPresets = await JSRuntime.InvokeAsync<string[]>("listLocalPresets");
					StateHasChanged();
				}

				async Task LoadStandardPreset(string name)
				{
					var json = await JSRuntime.InvokeAsync<string>("computePreset", name);
					LoadFromJson(json);
				}

				async Task LoadLocalPreset(string name)
				{
					var json = await JSRuntime.InvokeAsync<string>("loadLocalPreset", name);
					LoadFromJson(json);
				}

				public void LoadFromJson(string json)
				{
					Flags.Preset preset = System.Text.Json.JsonSerializer.Deserialize<Flags.Preset>(json);
					Flags.Flags = preset.Flags;
					SetStatusMessage.Invoke(preset.Name + " preset successfully loaded.");
					presetName = preset.Name;
					StateHasChanged();
				}

				async Task DeleteLocalPreset(string presetName)
				{
					await JSRuntime.InvokeAsync<string>("deleteLocalPreset", presetName);
					SetStatusMessage.Invoke(presetName + " local preset deleted.");
					await UpdatePresets();
				}

				async Task SavePreset(bool download)
				{
					System.Text.Json.JsonSerializerOptions options = new System.Text.Json.JsonSerializerOptions();
					options.IgnoreReadOnlyProperties = true;
					options.WriteIndented = true;

					Flags.Preset preset = new Flags.Preset();
					preset.Name = presetName;
					preset.Flags = Flags.Flags;

					var json = System.Text.Json.JsonSerializer.Serialize(preset, options);
					var encoded = Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(json));

					if (download)
					{
						await JSRuntime.InvokeAsync<object>("downloadROM", $"{presetName}.json", encoded);
					}
					else
					{
						await JSRuntime.InvokeAsync<object>("storePreset", presetName, json);
						if (localPresets.Contains(presetName))
						{
							SetStatusMessage.Invoke($"Saved preset {presetName} updated.");
						}
						else
						{
							SetStatusMessage.Invoke($"Saved {presetName} to local presets.");
						}
						await UpdatePresets();
					}
				}

				async Task OnPresetChanged(ChangeEventArgs e)
				{
					try
					{
						var json = await JSRuntime.InvokeAsync<string>("handlePresetSelect", "presetInput");
						var preset = System.Text.Json.JsonSerializer.Deserialize<Flags.Preset>(json);
						Flags.Flags = preset.Flags;
						presetName = preset.Name;
						SetStatusMessage.Invoke($"{preset.Name} preset successfully loaded from json file.");
					}
					catch (Exception ex)
					{
						SetStatusMessage.Invoke("Preset load failed: " + ex.ToString());
					}
					StateHasChanged();
				} }
