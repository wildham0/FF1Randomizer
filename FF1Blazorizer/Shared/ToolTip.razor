@using System.Net.Http.Json
@using System.Text.RegularExpressions
@inject HttpClient  Http

<div class="ffr-tooltip" style="@css">
	<a class="styled-button" @onclick="@HideToolTip">@Title</a>
	<a class="styled-button ffr-tooltip-close" @onclick="@HideToolTip"> X </a>
	<div class="framed-content ffr-tooltip-content" @onmousedown=@StartDrag @onmousemove=@Drag @onmouseup=@EndDrag @onmouseout=@Drag>
		<div class="ffr-tooltip-screenshot" style="@(ScreenshotStyle())"></div>
		@foreach (var paragraph in Description.Split("\n"))
		{
			@if (paragraph.Length >= 6 && paragraph.Trim().Substring(0, 6).Equals("[grid]"))
			{
				/* [grid] Markup Example

				1) Start with this basic grid template:

				[grid]
				[r]header|header|header|header
				[r] stuff| stuff| stuff| stuff

				2) Condense into single line for the JSON tooltip:

				[grid][r]header|header|header|header[r]stuff|stuff|stuff|stuff

				Optional) Add {b} to a cell for *Bold*, Add {i} to a cell for /Italic/, Add {l} to left align in the cell, Add {r} to right align in the cell

				[grid]
				[r]{i}header|{i}header|{i}header|{i}header
				[r]{r}right |  center |{l}left  |{b}bold

				*/
				<div style="overflow: auto">
					<table border="1">
						<tbody>
							@foreach (var rowData in paragraph.Substring(6).Split("[r]"))
							{
								@if (rowData.Length > 0)
								{
									<tr>
										@foreach (var cellData in rowData.Split("|"))
										{
											<td style="@(CellStyle(cellData))">@Regex.Replace(cellData, "{.}", "")</td>
										}
									</tr>
								}
							}
						</tbody>
					</table>
				</div>
			}
			else
			{
				// handle regular tooltip text
				<p class="ffr-tooltip-text">@paragraph</p>
			}
		}
		<p style="clear: both; margin: 0px"></p>
	</div>
</div>

@code
{
	class ToolTipObj
	{
		public string Id { get; set; }
		public string title { get; set; }
		public string description { get; set; }
		public string screenshot { get; set; }
	}

	[Parameter] public string ToolTipId { get; set; }

	private List<ToolTipObj> Tooltips { get; set; }
	protected override async void OnInitialized()
	{
		Tooltips = await Http.GetFromJsonAsync<List<ToolTipObj>>("/tooltips/tooltips.json");
	}

	private ToolTipObj TTip => Enabled ? Tooltips.FirstOrDefault(x => x.Id == ToolTipId) : null;
	private string Title => Enabled ? (TTip != null ? TTip.title : "no title") : "";
	private string Description => Enabled ? (TTip != null ? TTip.description : "no description") : "";
	private int Width = 800;
	private bool Enabled { get; set; } = false;
	private string Visible => (Enabled ? "visibility:visible;" : "visibility:hidden;");
	private double PosTop { get; set; } = 200;
	private double PosLeft { get; set; } = 80;
	private string css =>
		$"left: {PosLeft}px; top: {PosTop}px; width: {Width}px; {Visible}";

	private bool Dragging = false;
	private double LastX = 0;
	private double LastY = 0;

	private string ScreenshotStyle()
	{
		if (!Enabled || TTip == null || TTip.screenshot == null)
			return "display: none;";

		return $"background-image: url(/images/tooltips/{TTip.screenshot})";
	}

	private string CellStyle(string cellData)
	{
		string styling;
		// alignment
		if (cellData.Trim().ToLower().Contains("{l}"))
		{
			styling = "text-align: left;";
		} else if (cellData.Trim().ToLower().Contains("{r}"))
		{
			styling = "text-align: right;";
		} else
		{
			// default to center alignment
			styling = "text-align: center;";
		}
		// formatting
		if (cellData.Trim().ToLower().Contains("{b}"))
		{
			styling += " font-weight: bold;";
		}
		if (cellData.Trim().ToLower().Contains("{i}"))
		{
			styling += " font-style: italic;";
		}
		// general table data properties for everything
		styling += " white-space: nowrap; max-width: unset; padding: 3px;";
		return styling;
	}

	private void ShowToolTip()
	{
		Enabled = true;
	}

	private void HideToolTip()
	{
		Enabled = false;
	}

	public void UpdatePos(string Id, MouseEventArgs e)
	{
		if (Id == "")
		{
			HideToolTip();
			StateHasChanged();
			return;
		}
		ShowToolTip();
		StateHasChanged();
	}

	private void StartDrag(MouseEventArgs e)
	{
		if (e.Button == 0)
		{
			Dragging = true;
			LastX = e.ClientX;
			LastY = e.ClientY;
		}
	}

	private void EndDrag(MouseEventArgs e)
	{
		if (e.Button == 0)
		{
			Dragging = false;
		}
	}

	public void Drag(MouseEventArgs e)
	{
		if (Dragging)
		{
			PosLeft = PosLeft + e.ClientX - LastX;
			LastX = e.ClientX;
			PosTop = PosTop + e.ClientY - LastY;
			LastY = e.ClientY;
		}

	}
}
